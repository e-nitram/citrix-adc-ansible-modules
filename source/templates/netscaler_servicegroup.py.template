#!/usr/bin/python
# -*- coding: utf-8 -*-

# TODO review status and supported_by when migrating to github
ANSIBLE_METADATA = {'status': ['preview'],
                    'supported_by': 'commiter',
                    'version': '1.0'}


# TODO: Add appropriate documentation
DOCUMENTATION = '''
---
module: netscaler_service_group
short_description: Manage service group configuration in Netscaler
description:
    - Manage service group configuration in Netscaler

version_added: "tbd"
options:
    nsip:
        description:
            - The Nescaler ip address.

        required: True
#{% for item in argument_options.basic_servicegroup %}
#{% include 'single_option.template' %}
#{% endfor %}
'''

# TODO: Add appropriate examples
EXAMPLES = '''
- name: Connect to netscaler appliance
    netscaler_service_group:
        nsip: "172.17.0.2"
'''

# TODO: Update as module progresses
RETURN = '''
config_updated:
    description: determine if a change in the netscaler configuration happened
    returned: always
    type: boolean
    sample: False
'''

from ansible.module_utils.basic import AnsibleModule
import copy


def main():
    from ansible.module_utils.netscaler import ConfigProxy, get_nitro_client, netscaler_common_arguments, log, loglines
    try:
        from nssrc.com.citrix.netscaler.nitro.resource.config.basic.servicegroup import servicegroup
        from nssrc.com.citrix.netscaler.nitro.resource.config.basic.servicegroup_servicegroupmember_binding import servicegroup_servicegroupmember_binding
        from nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception
        python_sdk_imported = True
    except ImportError as e:
        python_sdk_imported = False

    module_specific_arguments = dict(
        #{% for argument in module_arguments.basic_servicegroup %}
        #{% include 'single_argument_spec.template' %}
        #{% endfor %}
        # These are hand inserted
        servicemembers = dict(type='list'),
    )

    argument_spec = dict()

    argument_spec.update(netscaler_common_arguments)

    argument_spec.update(module_specific_arguments)

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
    )
    module_result = dict(
        changed=False,
        failed=False,
    )

    # Fail the module if imports failed
    if not python_sdk_imported:
        module.fail_json(msg='Could not load nitro python sdk')

    # Fallthrough to rest of execution

    client = get_nitro_client(module)
    client.login()

    # Instantiate service group configuration object
    readwrite_attrs = {{ readwrite_attrs.basic_servicegroup }}
    readonly_attrs = {{ readonly_attrs.basic_servicegroup }}
    servicegroup_proxy = ConfigProxy(
        actual=servicegroup(),
        client=client,
        attribute_values_dict=module.params,
        readwrite_attrs=readwrite_attrs,
        readonly_attrs=readonly_attrs
    )

    def service_group_exists():
        log('service_group_exists')
        if servicegroup.count_filtered(client, 'servicegroupname:%s' % module.params['servicegroupname']) > 0:
            return True
        else:
            return False

    def service_group_identical():
        log('service_group_identical')
        servicegroups = servicegroup.get_filtered(client, 'servicegroupname:%s' % module.params['servicegroupname'])
        if servicegroup_proxy.has_equal_attributes(servicegroups[0]):
            return True
        else:
            return False

    def get_servicegroups_from_module_params():
        log('get_servicegroups_from_module_params')
        readwrite_attrs = {{ readwrite_attrs.basic_servicegroup_servicegroupmember_binding }}
        readonly_attrs = {{ readonly_attrs.basic_servicegroup_servicegroupmember_binding }}

        members = []
        for config in module.params['servicemembers']:
            # Make a copy to update
            config = copy.deepcopy(config)
            config['servicegroupname'] = module.params['servicegroupname']
            member_proxy = ConfigProxy(
                actual=servicegroup_servicegroupmember_binding(),
                client=client,
                attribute_values_dict=config,
                readwrite_attrs=readwrite_attrs,
                readonly_attrs=readonly_attrs
            )
            members.append(member_proxy)
        return members



    def service_group_servicemembers_identical():
        log('service_group_servicemembers_identical')
        service_group_members = servicegroup_servicegroupmember_binding.get(client, module.params['servicegroupname'])
        module_service_groups = get_servicegroups_from_module_params()
        log('Number of service group members %s' % len(service_group_members))
        if len(service_group_members) != len(module_service_groups):
            return False

        # Fallthrough to member evaluation
        identical_count = 0
        for actual_member in service_group_members:
            for member in module_service_groups:
                if member.has_equal_attributes(actual_member):
                    identical_count += 1
                    break
        if identical_count != len(service_group_members):
            return False

        # Fallthrough to success
        return True

    def delete_all_servicegroup_members():
        log('delete_all_servicegroup_members')
        if servicegroup_servicegroupmember_binding.count(client, module.params['servicegroupname']) == 0:
            return
        service_group_members = servicegroup_servicegroupmember_binding.get(client, module.params['servicegroupname'])
        log('len %s' % len(service_group_members))
        log('count %s' % servicegroup_servicegroupmember_binding.count(client, module.params['servicegroupname']))
        for member in service_group_members:
            log('%s' % dir(member))
            log('ip %s' % member.ip)
            log('servername %s' % member.servername)
            if all([
                hasattr(member, 'ip'),
                member.ip is not None,
                hasattr(member, 'servername'),
                member.servername is not None,
            ]):
                member.ip = None

            member.servicegroupname = module.params['servicegroupname']
            servicegroup_servicegroupmember_binding.delete(client, member)

    def add_all_servicegroup_members():
        log('add_all_servicegroup_members')
        for member in get_servicegroups_from_module_params():
            member.add()

    try:
        if module.params['operation'] == 'present':
            log('Checking present')
            if not service_group_exists():
                if not module.check_mode:
                    servicegroup_proxy.add()
                    client.save_config()
                module_result['changed'] = True
            elif not service_group_identical():
                if not module.check_mode:
                    servicegroup_proxy.update()
                    client.save_config()
                module_result['changed'] = True

            if not service_group_servicemembers_identical():
                if not module.check_mode:
                    delete_all_servicegroup_members()
                    add_all_servicegroup_members()
                    client.save_config()
                module_result['changed'] = True

            # Sanity check for operation
            log('sanity check')
            if not service_group_exists():
                module.fail_json(msg='Service group is not present', loglines=loglines)
            if not service_group_identical():
                module.fail_json(msg='Service group is not identical to configuration', loglines=loglines)
            if not service_group_servicemembers_identical():
                module.fail_json(msg='Service group members differ from configuration', loglines=loglines)

        elif module.params['operation'] == 'absent':
            if service_group_exists():
                if not module.check_mode:
                    servicegroup_proxy.delete()
                    client.save_config()
                module_result['changed'] = True
            else:
                module_result['changed'] = False

            # Sanity check for operation
            if service_group_exists():
                module.fail_json(msg='Service group is present')

    except nitro_exception as e:
        msg = "nitro exception errorcode=" + str(e.errorcode) + ",message=" + e.message
        module.fail_json(msg=msg, loglines=loglines)

    client.logout()

    module.exit_json(loglines=loglines, **module_result )

if __name__ == "__main__":
    main()
