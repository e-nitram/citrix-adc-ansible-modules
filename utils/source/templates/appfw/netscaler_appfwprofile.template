#!/usr/bin/python
# -*- coding: utf-8 -*-

#  Copyright (c) 2018 Citrix Systems
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}



DOCUMENTATION = '''
---
module: netscaler_appfw_profile
short_description: Manage Netscaler Web Application Firewall profiles.
description:
    - Manage Netscaler Web Application Firewall profiles.
    - The module uses the NITRO API to make configuration changes to WAF policy labels on the target Netscaler.
    - The NITRO API reference can be found at https://developer-docs.citrix.com/projects/netscaler-nitro-api/en/latest
    - Note that due to NITRO API limitations the module may incorrectly report a changed status when no configuration change has taken place.

version_added: "2.8.0"

options:
#{% for item in main_object_doc_list %}
#{% include 'single_option.template' %}
#{% endfor %}


#{% for binding in bindings %}
    {{ binding.binding_key }}:
        desription: {{ binding.description }}
        suboptions:
            mode:
                description:
                    - If mode is C(exact): 
                    - Any bindings existing in the target Netscaler that are not defined in the attributes list will be removed.
                    - Any bindings not existing in the target Netscaler that are defined in the attributes list will be created.
                    - Any existing bindings that are defined in the attributes list but have differing attribute values will first be deleted and then recreated with the defined attribute values.
                    - If mode is C(bind):
                    - Any bindings in the attributes list that do not exist will be created on the target Netscaler.
                    - Any bindings defined in the attributes list that exist on the target Netscaler but have different attribute values will first be deleted and then recreated with the defined attribute values.
                    - Existing bindings that are not on the attributes list remain unaffected.
                    - If mode is C(unbind):
                    - Any bindings defined in the attributes list that also exist on the target Netscaler will be removed.
                    - Existing bindings that are not on the attributes list remain unaffected.
                choices:
                    - exact
                    - bind
                    - unbind
            attributes:
                description: 
                    - List of the attributes dictionaries for the bindings.
                    - Valid attribute keys:
                    #{% for item in binding.doc_list %}- {{ item }}
                    #{% endfor %}
#{% endfor %}

extends_documentation_fragment: netscaler
'''

EXAMPLES = '''
- name: setup profile with basic presets
  delegate_to: localhost
  netscaler_appfw_profile:
    nitro_user: nsroot
    nitro_pass: nsroot
    nsip: 192.168.1.1
    state: present
    name: profile_basic_1
    defaults: basic

- name: setup profile with denyurl bindings
  delegate_to: localhost
  netscaler_appfw_profile:
    nitro_user: '{{ nitro_user }}'
    nitro_pass: '{{ nitro_pass }}'
    nsip: '{{ nsip }}'
    state: present
    name: profile_basic_2
    denyurl_bindings:
      mode: exact
      attributes:
        - state: enabled
          denyurl: denyme.*
          comment: 'denyurl comment'

- name: remove profile
  delegate_to: localhost
  netscaler_appfw_profile:
    nitro_user: nsroot
    nitro_pass: nsroot
    nsip: 192.168.1.1
    state: absent
    name: profile_basic_integration_test
    defaults: basic
'''

RETURN = '''
loglines:
    description: list of logged messages by the module
    returned: always
    type: list
    sample: ['message 1', 'message 2']

msg:
    description: Message detailing the failure reason
    returned: failure
    type: str
    sample: "Action does not exist"
'''

import copy
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.netscaler.netscaler import NitroResourceConfig, NitroException, netscaler_common_arguments, log, loglines


class ModuleExecutor(object):
    
    def __init__(self, module):
        self.module = module
        self.main_nitro_class = '{{ main_nitro_class }}'

        # Dictionary containing attribute information
        # for each NITRO object utilized by this module
        self.attribute_config = {
            #{% for item in attributes_config_list %}
            #{% include 'nitro_config_object.template' %}
            #{% endfor %}

        }

        self.module_result = dict(
            changed=False,
            failed=False,
            loglines=loglines,
        )


    def update_or_create(self):
        log('ModuleExecutor.update_or_create()')
        # Check if main object exists
        config = NitroResourceConfig(
            module=self.module,
            resource=self.main_nitro_class,
            attribute_values_dict=self.module.params,
            attributes_list=self.attribute_config[self.main_nitro_class]['attributes_list'],
            transforms=self.attribute_config[self.main_nitro_class]['transforms'],
        )

        # Create or update main object
        try:
            appfw_profile_exists = config.exists(get_id_attributes=self.attribute_config[self.main_nitro_class]['get_id_attributes'])
        except NitroException as e:
            if e.errorcode == 258:
                appfw_profile_exists = False
            else:
                raise

        if not appfw_profile_exists:
            self.module_result['changed'] = True
            if not self.module.check_mode:
                log('Appfw profile does not exist. Will create.')
                config.create()
        else:
            if not config.values_subgroup_of_actual():
                log('Existing appfw profile does not have identical values to configured. Will update.')
                self.module_result['changed'] = True
                if not self.module.check_mode:
                    config.update(id_attribute='{{ main_object_put_id }}')

        self.sync_bindings()

    def delete(self):
        log('ModuleExecutor.delete()')
        # Check if main object exists
        config = NitroResourceConfig(
            module=self.module,
            resource=self.main_nitro_class,
            attribute_values_dict=self.module.params,
            attributes_list=self.attribute_config[self.main_nitro_class]['attributes_list'],
            transforms=self.attribute_config[self.main_nitro_class]['transforms'],
        )

        try:
            appfw_profile_exists = config.exists(get_id_attributes=self.attribute_config[self.main_nitro_class]['get_id_attributes'])
        except NitroException as e:
            if e.errorcode == 258:
                appfw_profile_exists = False
            else:
                raise

        if appfw_profile_exists:
            self.module_result['changed'] = True
            if not self.module.check_mode:
                config.delete(delete_id_attributes=self.attribute_config[self.main_nitro_class]['delete_id_attributes'])


    def sync_binding_with_data(self, data):

        binding_key = data['binding_key']
        binding_object = data['binding_object']

        if self.module.params.get(binding_key) is None:
            return

        log('ModuleExecutor syncing binding %s' % binding_key)

        mode = self.module.params[binding_key]['mode']

        # Get the existing bindings
        get_id = self.module.params[data['get_all_id']]

        try:
            existing_binding_values_dicts = NitroResourceConfig.get_all(self.module, binding_object, id=get_id)
        except NitroException as e:
            if e.errorcode == 258:
                log('Parent profile does not exist. Nothing to do for binding.')
                return
            else:
                raise

        log('existing_binding_values_dicts %s' % existing_binding_values_dicts)

        # Make a list of config objects for configured bindings
        configured_bindings = []
        for bind_values in self.module.params[binding_key]['attributes']:
            all_bind_values = copy.deepcopy(bind_values)
            main_value = self.module.params[data['link_to_main']['main_key']]
            all_bind_values.update({ data['link_to_main']['bind_key']: main_value })
            configured_binding = NitroResourceConfig(
                module=self.module,
                resource=binding_object,
                attribute_values_dict=all_bind_values,
                attributes_list=self.attribute_config[binding_key]['attributes_list'],
                transforms=self.attribute_config[binding_key]['transforms'],
            )

            configured_bindings.append(configured_binding)


        # First get the existing bindings
        configured_already_present = []
        if mode == 'exact':
            # Delete any binding that is not exactly as the configured
            for existing_binding_values_dict in existing_binding_values_dicts:
                for configured_binding in configured_bindings:
                    if configured_binding.values_identical_to_dict(existing_binding_values_dict):
                        configured_already_present.append(configured_binding)
                        break
                else:
                    log('Will delete binding')
                    config = NitroResourceConfig(
                        module=self.module,
                        resource=binding_object,
                        attributes_list=self.attribute_config[binding_key]['attributes_list'],
                        transforms=self.attribute_config[binding_key]['transforms'],
                        actual_dict=existing_binding_values_dict,
                    )
                    self.module_result['changed'] = True
                    if not self.module.check_mode:
                        config.delete(delete_id_attributes=self.attribute_config[binding_key]['delete_id_attributes'])

            # Create the bindings objects that we marked in previous loop
            for configured_binding in configured_bindings:
                dict_values = [ item.values_dict for item in configured_already_present ]
                log('dict values %s' % dict_values)
                log('configured dict values %s' % configured_binding.values_dict)
                if configured_binding.values_dict in dict_values:
                    log('Configured binding already exists')
                    continue
                else:
                    log('Configured binding does not already exist')
                self.module_result['changed'] = True
                if not self.module.check_mode:
                    configured_binding.create()

        elif mode == 'bind':
            for configured_binding in configured_bindings:
                create_configured_binding = True
                for existing_binding_values_dict in existing_binding_values_dicts:
                    if  configured_binding.values_by_key_identical_to_dict(
                            values_dict=existing_binding_values_dict,
                            key_list=self.attribute_config[binding_key]['delete_id_attributes']
                        ):
                        # Delete if not identical to all defined attributes
                        if not configured_binding.values_identical_to_dict(
                            values_dict=existing_binding_values_dict,
                            ):
                            self.module_result['changed'] = True
                            if not self.module.check_mode:
                                config = NitroResourceConfig(
                                    module=self.module,
                                    resource=binding_object,
                                    attributes_list=self.attribute_config[binding_key]['attributes_list'],
                                    transforms=self.attribute_config[binding_key]['transforms'],
                                    actual_dict=existing_binding_values_dict,
                                )
                                config.delete(delete_id_attributes=self.attribute_config[binding_key]['delete_id_attributes'])
                        else:
                            create_configured_binding = False
                if create_configured_binding:
                    self.module_result['changed'] = True
                    if not self.module.check_mode:
                        configured_binding.create()

        elif mode == 'unbind':
            for configured_binding in configured_bindings:
                for existing_binding_values_dict in existing_binding_values_dicts:
                    if  configured_binding.values_by_key_identical_to_dict(
                            values_dict=existing_binding_values_dict,
                            key_list=self.attribute_config[binding_key]['delete_id_attributes']
                        ):
                        self.module_result['changed'] = True
                        if not self.module.check_mode:
                            configured_binding.delete(delete_id_attributes=self.attribute_config[binding_key]['delete_id_attributes'])

    def sync_bindings(self):
        log('ModuleExecutor.sync_bindings()')
        #{% for item in bindings %}
        self.sync_{{ item.binding_key }}()
        #{% endfor %}


        #{% for item in bindings %}
        #{% include 'appfwprofile_binding_methods.template' %}
        #{% endfor %}


    def main(self):
        try:

            if self.module.params['state'] == 'present':
                self.update_or_create()
            elif self.module.params['state'] == 'absent':
                self.delete()

            self.module.exit_json(**self.module_result)

        except NitroException as e:
            msg = "nitro exception errorcode=%s, message=%s, severity=%s" % (str(e.errorcode), e.message, e.severity)
            self.module.fail_json(msg=msg, **self.module_result)
        except Exception as e:
            msg = 'Exception %s: %s' % (type(e), str(e))
            self.module.fail_json(msg=msg, **self.module_result)



def main():


    argument_spec = dict()

    module_specific_arguments = dict(
        #{% for item in main_object_doc_list %}
        #{% include 'single_argument_spec.template' %}
        #{% endfor %}

        #{% for item in bindings %}
        {{ item.binding_key }}=dict(type='dict'),#{% endfor %}
    )


    argument_spec.update(netscaler_common_arguments)
    argument_spec.update(module_specific_arguments)


    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
    )

    executor = ModuleExecutor(module=module)
    executor.main()


if __name__ == '__main__':
    main()
