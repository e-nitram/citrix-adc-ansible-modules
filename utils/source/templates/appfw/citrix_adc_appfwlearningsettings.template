#!/usr/bin/python
# -*- coding: utf-8 -*-

#  Copyright (c) 2018 Citrix Systems
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function
__metaclass__ = type


ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}



DOCUMENTATION = '''
---
module: citrix_adc_appfw_learningsettings
short_description: Configuration for learning settings resource.
description: Configuration for learning settings resource.

version_added: "2.8.0"

author:
    - George Nikolopoulos (@giorgos-nikolopoulos)
    - Sumanth Lingappa (@sumanth-lingappa)

options:
#{% for item in main_object_doc_list %}
#{% include 'single_option.template' %}
#{% endfor %}


extends_documentation_fragment: netscaler
'''

EXAMPLES = '''
- hosts: citrix_adc

  gather_facts: False
  tasks:
    - name: Setup learning settings
      delegate_to: localhost
      citrix_adc_appfw_learningsettings:
        nitro_user: nsroot
        nitro_pass: nsroot
        nsip: 192.168.1.2
        state: present

        profilename: test_profile
        starturlminthreshold: 100
        starturlpercentthreshold: 100
        cookieconsistencyminthreshold: 100
        cookieconsistencypercentthreshold: 100
        csrftagminthreshold: 100
        csrftagpercentthreshold: 100
        fieldconsistencyminthreshold: 100
        fieldconsistencypercentthreshold: 100
        crosssitescriptingminthreshold: 100
        crosssitescriptingpercentthreshold: 100
        sqlinjectionminthreshold: 100
        sqlinjectionpercentthreshold: 100
        fieldformatminthreshold: 100
        fieldformatpercentthreshold: 100
        creditcardnumberminthreshold: 100
        creditcardnumberpercentthreshold: 100
        contenttypeminthreshold: 100
        contenttypepercentthreshold: 100
        xmlwsiminthreshold: 100
        xmlwsipercentthreshold: 100
        xmlattachmentminthreshold: 100
        xmlattachmentpercentthreshold: 100
'''

RETURN = '''
loglines:
    description: list of logged messages by the module
    returned: always
    type: list
    sample: ['message 1', 'message 2']

msg:
    description: Message detailing the failure reason
    returned: failure
    type: str
    sample: "Action does not exist"
'''

import copy
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.netscaler.netscaler import NitroResourceConfig, NitroException, netscaler_common_arguments, log, loglines


class ModuleExecutor(object):
    
    def __init__(self, module):
        self.module = module
        self.main_nitro_class = '{{ main_nitro_class }}'

        # Dictionary containing attribute information
        # for each NITRO object utilized by this module
        self.attribute_config = {
            #{% for item in attributes_config_list %}
            #{% include 'nitro_config_object.template' %}
            #{% endfor %}

        }

        self.module_result = dict(
            changed=False,
            failed=False,
            loglines=loglines,
        )


    def update(self):
        log('ModuleExecutor.update()')
        # Check if main object exists
        config = NitroResourceConfig(
            module=self.module,
            resource=self.main_nitro_class,
            attribute_values_dict=self.module.params,
            attributes_list=self.attribute_config[self.main_nitro_class]['attributes_list'],
            transforms=self.attribute_config[self.main_nitro_class]['transforms'],
        )

        config.get_actual(self.attribute_config[self.main_nitro_class]['get_id_attributes'])
        if not config.values_subgroup_of_actual():
            self.module_result['changed'] = True
            if not self.module.check_mode:
                config.update()


    def main(self):
        try:

            if self.module.params['state'] == 'present':
                self.update()
            elif self.module.params['state'] == 'absent':
                log('Nothing to do for state absent')

            self.module.exit_json(**self.module_result)

        except NitroException as e:
            msg = "Nitro exception: errorcode=%s, message=%s, severity=%s" % (str(e.errorcode), e.message, e.severity)
            self.module.fail_json(msg=msg, **self.module_result)
        except Exception as e:
            msg = 'Exception %s: %s' % (type(e), str(e))
            self.module.fail_json(msg=msg, **self.module_result)



def main():


    argument_spec = dict()

    module_specific_arguments = dict(
        #{% for item in main_object_doc_list %}
        #{% include 'single_argument_spec.template' %}
        #{% endfor %}

    )


    argument_spec.update(netscaler_common_arguments)
    argument_spec.update(module_specific_arguments)


    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
    )

    executor = ModuleExecutor(module=module)
    executor.main()


if __name__ == '__main__':
    main()
