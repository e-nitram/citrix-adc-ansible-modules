[
    {
        "option_name": "priority",
        "type": "float",
        "description": [
            "Integer specifying the policy's priority. The lower the number, the higher the priority. Policies are evaluated in the order of their priority numbers. Maximum value for default syntax policies is 2147483647 and for classic policies is 64000.",
            "Minimum value =  0",
            "Maximum value =  2147483647"
        ],
        "is_get_id": false,
        "is_delete_id": false,
        "is_updateable": false
    },
    {
        "option_name": "gotopriorityexpression",
        "type": "str",
        "description": [
            "Next priority expression."
        ],
        "is_get_id": false,
        "is_delete_id": false,
        "is_updateable": false
    },
    {
        "option_name": "bindpoint",
        "type": "str",
        "choices": [
            "REQUEST",
            "RESPONSE",
            "ICA_REQUEST",
            "OTHERTCP_REQUEST"
        ],
        "description": [
            "Bindpoint to which the policy is bound.",
            "Possible values = REQUEST, RESPONSE, ICA_REQUEST, OTHERTCP_REQUEST"
        ],
        "is_get_id": false,
        "is_delete_id": true,
        "is_updateable": false
    },
    {
        "option_name": "name",
        "type": "str",
        "description": [
            "Name of the virtual server.",
            "Minimum length =  1"
        ],
        "is_get_id": true,
        "is_delete_id": true,
        "is_updateable": false
    },
    {
        "option_name": "policy",
        "type": "str",
        "description": [
            "Name of a policy to bind to the virtual server (for example, the name of an authentication, session, or endpoint analysis policy).",
            "Minimum length =  1"
        ],
        "is_get_id": false,
        "is_delete_id": true,
        "is_updateable": false
    },
    {
        "option_name": "secondary",
        "type": "bool",
        "description": [
            "Binds the authentication policy as the secondary policy to use in a two-factor configuration. A user must then authenticate not only via a primary authentication method but also via a secondary authentication method. User groups are aggregated across both. The user name must be exactly the same for both authentication methods, but they can require different passwords."
        ],
        "is_get_id": false,
        "is_delete_id": true,
        "is_updateable": false
    },
    {
        "option_name": "groupextraction",
        "type": "bool",
        "description": [
            "Binds the authentication policy to a tertiary chain which will be used only for group extraction.  The user will not authenticate against this server, and this will only be called if primary and/or secondary authentication has succeeded."
        ],
        "is_get_id": false,
        "is_delete_id": true,
        "is_updateable": false
    }
]