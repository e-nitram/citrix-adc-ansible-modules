- name: Get entity
  delegate_to: localhost
  citrix_adc_nitro_request:
    nsip: "{{ nsip }}"
    nitro_user: "{{ nitro_user }}"
    nitro_pass: "{{ nitro_pass }}"

    operation: get
    
    expected_nitro_errorcode: "{{ get_acceptable_error_codes }}"

    resource: "{{ resource }}"
    name: "{{ resource_name }}"
  register: get_result



- name: Set get entity output variables
  set_fact:
    resource_exists: "{{ get_result.nitro_errorcode == 0 }}"
    non_updateable_attributes_conflict: false
    do_create: false
    do_update: false



- name: Set do create flag
  set_fact:
    do_create: true
  when: not resource_exists

- name: Set difference dictionary
  delegate_to: localhost
  set_fact:
    difference: {}
  when: not resource_exists

- name: Set difference dictionary
  delegate_to: localhost
  set_fact:
    difference: |
      {% set res = {} -%}
      {% for key in resource_attributes.keys() -%}
        {% if key in get_result.nitro_object[0] -%}
          {% if get_result.nitro_object[0][key] != resource_attributes[key] -%}
            {% set res = res.update({ key: { 'ours': resource_attributes[key], 'theirs': get_result.nitro_object[0][key]}}) -%}
          {%- endif %}
        {%- else -%}
            {% set res = res.update({ key: {'ours': resource_attributes[key], 'theirs': none}}) -%}
        {%- endif %}
      {%- endfor %}
      {{ res }}

  when: resource_exists


- name: Set do update variable
  set_fact:
    do_update: true
  when: difference != {}

- name: Process non updateable attributes flag
  set_fact:
    non_updateable_attributes_conflicting_keys: "{{ difference | intersect(resource_non_updateable_attributes) }}"
    
- name: Set non updateable attributes flag
  set_fact:
    non_updateable_attributes_conflict: true
  when: "non_updateable_attributes_conflicting_keys != []"

- name: Fail for non updateable conflict
  fail:
    msg: "Cannot update immutable attribute keys"
  when:
    - fail_on_non_updateable_conflict
    - non_updateable_attributes_conflict

- name: Construct update attributes dictionary by removing all non updateable attributes
  set_fact:
    resource_update_attributes: |
      {% set res = {} -%}
      {% for key in resource_attributes.keys() -%}
        {% if key not in resource_non_updateable_attributes -%}
            {% set res = res.update({ key: resource_attributes[key] }) -%}
        {%- endif %}
      {%- endfor %}
      {{ res }}

- name: Set output variables default values
  set_fact:
    "{{ debug_prefix }}nitro_object": none
    "{{ debug_prefix }}operation": none
    "{{ debug_prefix }}resource_difference": "{{ difference }}"

- name: Set output variables
  set_fact:
    "{{ debug_prefix }}nitro_object": "{{ get_result.nitro_object[0] }}"
  when: resource_exists

- name: Set output variables
  set_fact:
    "{{ debug_prefix }}operation": "create"
  when: do_create

- name: Set output variables
  set_fact:
    "{{ debug_prefix }}operation": "update"
  when: do_update
